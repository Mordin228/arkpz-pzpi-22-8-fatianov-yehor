МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»




ЗВІТ
З лабораторної роботи №5
з дисципліни
«Аналіз та рефакторинг коду»



Виконав:                                                                                                  Перевірив                      
ст. гр. ПЗПІ-22-8                                                                      ст. викладач каф. ПІ
Фатьянов Єгор                                                                                   Сокорчук І. П.












Харків 2024
5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ

5.1	Мета роботи
Метою роботи є розгортання програмної системи та демонстрація її роботи.
5.2	Хід роботи
5.2.1	Опис проекту
Проект MedProtect — це програмно-апаратна система для моніторингу стану здоров’я користувачів на основі IoT-технологій. Основна ідея полягає у створенні інтегрованого рішення, що дозволяє автоматично збирати, аналізувати та зберігати дані про фізичну активність та серцевий ритм користувачів, а також реагувати на критичні зміни в їхньому стані. Система включає IoT-браслет, сервер для обробки даних, базу даних для зберігання історичних показників та систему сповіщень для інформування користувачів та страхових компаній.
Основними компонентами є ESP32 для збору даних із сенсорів серцевого ритму та руху, сервер Node.js, який обробляє отриману інформацію та взаємодіє із базою даних MS SQL Server, а також MQTT-брокер, що забезпечує швидку передачу даних між пристроями та сервером. Всі зібрані дані зберігаються в базі даних, що дозволяє створювати історію здоров’я користувача та формувати аналітичні звіти. У разі виявлення відхилень система може автоматично надсилати сповіщення користувачам або страховим компаніям для оперативного реагування.
Ключовою особливістю системи є використання алгоритмів обробки фізіологічних даних, що дозволяють оцінювати рівень фізичної активності та прогнозувати можливі ризики для здоров’я. Сервер аналізує отримані показники та може визначати критичні стани, такі як надмірне навантаження або різкі зміни серцевого ритму. Усі показники передаються через MQTT-протокол, що забезпечує швидкий та стабільний зв’язок між IoT-браслетом і сервером.
Система розроблена з урахуванням можливості масштабування та інтеграції з іншими медичними сервісами. Вона підтримує додавання нових сенсорів та розширення функціоналу, що дозволяє використовувати її не тільки для моніторингу здоров’я, але й у сфері страхування, спортивної медицини та реабілітації.
Таким чином, MedProtect поєднує IoT-технології, обробку медичних даних та автоматичний контроль стану здоров’я, забезпечуючи користувачам надійний інструмент для моніторингу фізичних показників та взаємодії зі страховими компаніями.
5.2.2	Інженерні рішення
Розробка MedProtect включала кілька ключових інженерних рішень, спрямованих на стабільність, масштабованість і ефективність системи. Для комунікації між сервером і IoT-пристроєм було обрано MQTT-протокол, що забезпечує швидку і надійну передачу даних із мінімальним навантаженням на мережу. Це дозволяє в реальному часі отримувати інформацію про стан здоров’я користувача та передавати її на сервер для подальшої обробки. Для зберігання даних використовується MySQL, що гарантує структуроване збереження інформації про користувачів, показники здоров’я та страхові випадки. Серверна частина реалізована на Node.js із використанням Express.js, що забезпечує швидке оброблення запитів та інтеграцію з клієнтськими додатками через REST API.
Система передбачає автоматизований збір даних із сенсорів IoT-браслета, який вимірює пульс і кількість зроблених кроків. На основі цих параметрів розраховується рівень активності користувача, а також кількість спалених калорій. У разі виявлення критичних відхилень система автоматично надсилає повідомлення користувачеві або відповідному страховику. Це дозволяє оперативно реагувати на потенційні ризики для здоров’я.
Для тестування та симуляції роботи IoT-пристрою використовується платформа Wokwi, що дозволяє без фізичного обладнання перевіряти коректність роботи алгоритмів та налаштувань. IoT-браслет підключається до Wi-Fi, взаємодіє з MQTT-брокером та передає дані на сервер, після чого отримує команди, якщо необхідно активувати певні функції або сповістити користувача.
Алгоритми перевірки показників здоров’я реалізовані у серверній логіці та дозволяють оцінювати, чи перебувають дані в межах допустимого діапазону. У разі виявлення відхилень система генерує відповідні сповіщення та реєструє подію в базі даних. Це забезпечує безперервний моніторинг, своєчасне реагування на критичні ситуації та можливість подальшого аналізу зібраної інформації. Завдяки використанню публічного MQTT-брокера HiveMQ система отримала швидку інтеграцію між сервером та IoT-пристроями без необхідності налаштовувати власний брокер. Такий підхід забезпечує стабільну та ефективну роботу MedProtect, дозволяючи легко масштабувати систему та адаптувати її під нові потреби.


5.2.3	Розгортання системи
Розгортання системи MedProtect розпочинається з налаштування всіх необхідних інструментів для її роботи. Спочатку слід переконатися, що встановлено Node.js та npm, які забезпечують виконання серверного коду. Якщо ці компоненти ще не встановлені, їх можна завантажити з офіційного сайту Node.js. Після встановлення необхідно відкрити термінал і перевірити коректність встановлення командами node -v та npm -v.
Наступним кроком є завантаження або клонування репозиторію проєкту на локальний комп’ютер за допомогою команди:
git clone https://github.com/NureFatianovYehor/arkpz-pzpi-22-8-fatianov-yehor.git
Після цього потрібно перейти до папки з проєктом та встановити всі необхідні залежності, виконавши у терміналі наступні команди:
npm install express
npm install --save-dev nodemon
npm install mysql2
npm install mqtt
npm install swagger-ui-express
Ці пакети забезпечують роботу API, підключення до бази даних MySQL, обмін повідомленнями через MQTT та інтеграцію документації Swagger.
Перед запуском серверної частини необхідно налаштувати базу даних MySQL. Для цього потрібно створити базу даних і виконати SQL-скрипт, що міститься у репозиторії. Після налаштування БД можна запустити сервер за допомогою команди:
node index.js
Переконайтеся, що сервер працює, відкривши у веб-браузері http://localhost:3000 для перевірки API або http://localhost:3000/api-docs для перегляду документації Swagger.
Для налаштування IoT-пристроїв необхідно завантажити середовище Wokwi, яке дозволяє протестувати роботу IoT-браслета без фізичного обладнання. У середовищі потрібно створити схему, що відповідає файлу diagram.json, або імпортувати його для автоматичного налаштування. Далі слід завантажити код для ESP32, перевірити його взаємодію з сервером через MQTT-брокер (HiveMQ), а також переконатися, що дані коректно передаються і обробляються.
Для контролю за передачею даних потрібно налаштувати серійний монітор у Wokwi, що дозволить перевіряти повідомлення пристрою та його взаємодію з сервером. Варто звернути увагу, чи передаються значення пульсу та кроків, чи обчислюється кількість спалених калорій, а також чи записуються дані у базу.
Фінальним етапом є тестування всієї системи. Необхідно перевірити, чи оновлюються показники IoT-браслета у базі даних, чи працює обробка критичних станів, чи надсилаються сповіщення при перевищенні допустимих значень, а також чи коректно оновлюється інформація у логах. Якщо всі компоненти працюють згідно з очікуваннями, система MedProtect готова до використання.

5.3	Висновки
	У результаті виконаної роботи була успішно розроблена та налаштована система MedProtect, яка забезпечує автоматизований моніторинг стану здоров’я користувачів за допомогою IoT-пристроїв. Усі компоненти працюють у взаємодії: дані про пульс, кількість кроків і витрачені калорії передаються через MQTT-брокер на сервер, де вони зберігаються в базі даних та аналізуються. У разі виявлення критичних показників система автоматично надсилає сповіщення користувачеві або відповідальним особам.
Тестування підтвердило стабільність роботи всіх модулів: дані коректно зчитуються із сенсорів, передаються на сервер, зберігаються в базі даних і відображаються у системі. Алгоритми обробки інформації працюють відповідно до заданих параметрів, а механізм сповіщень успішно реагує на зміни стану здоров’я. Це свідчить про правильну реалізацію бізнес-логіки системи та готовність до подальшого вдосконалення.
Таким чином, MedProtect забезпечує ефективний та надійний механізм контролю здоров’я, що може бути використаний як для особистого моніторингу, так і для медичних страхових програм. Гнучкість архітектури дозволяє легко інтегрувати нові сенсори та розширювати функціонал, що робить систему перспективною для подальшого розвитку.

Посилання на відео : https://youtu.be/HrTr6_BiWwM
