const express = require('express');
const sql = require('../config/db');
const mqtt = require('mqtt');

const router = express.Router();
const mqttClient = mqtt.connect('mqtt://broker.hivemq.com');

let latestMetrics = {}; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö

mqttClient.on('connect', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É');
    mqttClient.subscribe('wokwi/device/1/data', (err) => {
        if (!err) {
            console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: wokwi/device/1/data');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
        }
    });
});

mqttClient.on('message', async (topic, message) => {
    try {
        const payload = JSON.parse(message.toString());
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:`, payload);

        const { DeviceID, HeartRate, Steps, CaloriesBurned } = payload;

        if (DeviceID === undefined || HeartRate === undefined || Steps === undefined || CaloriesBurned === undefined) {
            console.log('‚õî –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        await sql.query`
            INSERT INTO HealthMetrics (DeviceID, HeartRate, Steps, CaloriesBurned, Timestamp) 
            VALUES (${DeviceID}, ${HeartRate}, ${Steps}, ${CaloriesBurned}, GETDATE())
        `;

        // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é latestMetrics
        latestMetrics = { DeviceID, HeartRate, Steps, CaloriesBurned, Timestamp: new Date().toISOString() };

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ latestMetrics');

        // üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º –ß–°–° –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –ø—É–ª—å—Å–µ (>120)
        if (HeartRate > 120) {
            await sql.query`
                INSERT INTO Notifications (UserID, NotificationDate, Message)
                VALUES (${DeviceID}, GETDATE(), '‚ö† –í–∏—Å–æ–∫–∏–π –ø—É–ª—å—Å: ${HeartRate} —É–¥–∞—Ä—ñ–≤/—Ö–≤! –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.')
            `;

            console.log(`üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –í–∏—Å–æ–∫–∏–π –ø—É–ª—å—Å - ${HeartRate} —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É!`);
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT:', err.message);
    }
});

/**
 * @swagger
 * /api/metrics/latest:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ –∑ IoT-–ø—Ä–∏—Å—Ç—Ä–æ—é (Wokwi)
 *     tags: [Metrics]
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 *       404:
 *         description: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
router.get('/latest', async (req, res) => {
    if (!latestMetrics || Object.keys(latestMetrics).length === 0) {
        return res.status(404).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
    res.json(latestMetrics);
});

module.exports = router;
