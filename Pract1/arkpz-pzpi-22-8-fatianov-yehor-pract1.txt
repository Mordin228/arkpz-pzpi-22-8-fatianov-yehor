Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Фатьянов Є.С.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи:
Ознайомитися з рефакторінгом коду на обраній мові програмування. Набути навичок з рефакторінгу коду для покращення якості.

2. Завдання
Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

3. Хід роботи
Було обрано мову програмування Lua. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій.

Висновки

У ході практичної роботи було вивчено рефакторинг коду на мові Lua, зокрема рекомендації щодо покращення читабельності, організації функцій та іменування змінних. На прикладах коду було продемонстровано, як ці рекомендації покращують структуру та ефективність програми. Рефакторинг допомагає знизити кількість помилок і підвищити підтримуваність коду.

Відео-презентація: https://youtu.be/Enu35j9vOCs


ДОДАТОК А
Програмний код, використаний як приклад у презентації.

/Lua/

-- Поганий приклад
function example_function()
    print("This is a poorly formatted function")
end

-- Гарний приклад
function exampleFunction()
    print("This is a well-formatted function")
end

-- Поганий приклад
function f(a)
    return a * 2
end

local x = f(10)

-- Гарний приклад
function multiplyByTwo(number)
    return number * 2
end

local result = multiplyByTwo(10)

-- Поганий приклад
function printSum(a, b)
    print(sum) -- Використання глобальної змінної
end

sum = 10 -- Глобальна змінна
printSum(3, 4)

-- Гарний приклад
local function calculateSum(a, b)
    return a + b
end

local result = calculateSum(3, 4)
print(result)

-- Поганий приклад
function processData(data)
    print("Processing data...")
    print("Data size: " .. #data)
    for i = 1, #data do
        print("Element " .. i .. ": " .. data[i])
    end
end

-- Гарний приклад
local function printDataInfo(data)
    print("Processing data...")
    print("Data size: " .. #data)
end

local function printDataElements(data)
    for i = 1, #data do
        print("Element " .. i .. ": " .. data[i])
    end
end

local function processData(data)
    printDataInfo(data)
    printDataElements(data)
end

-- Поганий приклад
for i = 1, 1000000 do
    local square = math.pow(i, 2) -- Використання дорогого методу в циклі
end

-- Гарний приклад
local function square(n)
    return n * n
end

for i = 1, 1000000 do
    local squareValue = square(i) -- Ефективніше обчислення
end

-- Поганий приклад
function riskyFunction()
    error("Something went wrong!")
end

riskyFunction()

-- Гарний приклад
function riskyFunction()
    error("Something went wrong!")
end

local status, err = pcall(riskyFunction)
if not status then
    print("Caught an error: " .. err)
end

-- Поганий приклад
function process()
    local data = {1, 2, 3}
    for i = 1, #data do
        print("Value: " .. data[i])
    end
end

process()

-- Гарний приклад
local DataProcessor = {}

function DataProcessor:process(data)
    for i = 1, #data do
        print("Value: " .. data[i])
    end
end

local processor = DataProcessor
processor:process({1, 2, 3})

-- Поганий приклад
function add(a, b)
    return a + b
end

-- Немає тестів і документації

-- Гарний приклад
--- Додає два числа.
-- @param a Перше число
-- @param b Друге число
-- @return Сума чисел
local function add(a, b)
    return a + b
end

-- Тести
local function testAdd()
    assert(add(2, 3) == 5)
end




ДОДАТОК Б
Презентація на тему «Основні рекомендації для ефективного написання коду на Lua».


ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ

Виконав ст. гр. ПЗПІ-22-8 Фатьянов Єгор

Вступ: Особливості мови Lua
Lua — швидка і компактна скриптова мова програмування, розроблена підрозділом Tecgraf Католицького університету Ріо-де-Жанейро (Pontifical Catholic University of Rio de Janeiro in Brazil). Інтерпретатор мови є вільно поширюваним, з відкритим початковим кодом на мові C.

Рекомендація 1: Стильові правила коду
Опис:

Використовуйте 2 пробіли для відступів.
Уникайте довгих рядків (менше 80 символів).
Не додавайте зайвих пробілів у кінцях рядків.
Чому це важливо:
Дотримання стилю забезпечує читабельність і стандартизацію коду в команді.

Рекомендація 2: Назви змінних, функцій та класів
Опис:

Назви змінних та функцій повинні бути зрозумілими та осмисленими.
Наприклад, calculateSum кращий за f.
Чому це важливо:
Зрозумілі назви роблять код більш читабельним і легшим у підтримці.

Рекомендація 3: Структура коду
Опис:

Використовуйте локальні змінні.
Дотримуйтеся логічної послідовності в коді.
Чому це важливо:
Добре структурований код знижує ризик помилок і спрощує підтримку.

Рекомендація 4: Принципи рефакторингу
Опис:

Розбивайте код на менші функції, які можна повторно використовувати.
Чому це важливо:
Рефакторинг робить код зрозумілим і легким у підтримці.

Рекомендація 5: Оптимізація продуктивності
Опис:

Використовуйте профілювання коду для пошуку проблем.
Уникайте дорогих операцій у циклах.
Чому це важливо:
Оптимізація підвищує швидкість виконання програми.

Рекомендація 6: Обробка помилок
Опис:

Lua не має вбудованої системи обробки виключень, тому використовуйте pcall.
Чому це важливо:
Допомагає уникнути раптових збоїв програми та забезпечує контроль над виконанням.

Рекомендація 7: Дотримання парадигм програмування
Опис:

Lua підтримує об'єктно-орієнтований підхід через таблиці та метаметоди.
Чому це важливо:
Дотримання парадигми підвищує зрозумілість і структурованість коду.

Рекомендація 8: Тестування коду та документування
Опис:

Документуйте функції, пояснюючи їх параметри та результати.
Пишіть юніт-тести для ключових функцій.
Чому це важливо:
Тести гарантують правильну роботу коду навіть після змін.

Висновки
Дотримання кращих практик робить код ефективним, читабельним і підтримуваним.
Читабельність і зрозумілість коду важливі для роботи в команді.
Оптимізація та ефективність підвищують продуктивність програми.
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
"Programming in Lua" — Roberto Ierusalimschy, 4th edition, 2016.
Офіційна документація Lua: lua.org
Stack Overflow: stackoverflow.com
"Learn Lua in Y Minutes" — learnxinyminutes.com/docs/lua

