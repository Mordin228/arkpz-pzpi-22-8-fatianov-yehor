Міністерство освіти та науки України 
Харківський національний університет радіоелектроніки 
 
 
Кафедра ПІ 
 
 
 
Звіт 
З практичної роботи 2 
Тема роботи: «Методи рефакторингу коду програмного забезпечення»
з дисципліни «Аналіз та рефакторинг коду» 
 
 
 
 
 
 
Виконав: 	Перевірив: 
ст. гр. ПЗПІ-22-8 	ст. викладач Сокорчук І.П. 
Фатьянов Є.С.
 
 
 
 
 
 
 
 
Харків 2024 
 
1. Мета роботи: 
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості. 
 
2.	Завдання 
Студент повинен обрати 3 метода рефакторингу з книги  Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів. 3). 
Кожен метод рефакторингу повинен супроводжуватись: 
Описом проблеми, яку вирішує даний метод. 
Кодом до і після застосування методу рефакторингу. 
Поясненням переваг використаного методу. 
 
3.	Хід роботи 
Було обрано 3 методи рефакторингу. У презентації (Додаток Б) наведено приклади свого особистого коду, який потребує покращення, та застосування обраних методів. 
 
Висновки 
У процесі виконання практичної роботи були вивчені три методи рефакторингу з книги Мартіна Роберта "Чистий код", які допомогли покращити якість коду. Для кожного методу було продемонстровано реальні приклади з особистих проєктів, що дозволило зрозуміти, як правильно ідентифікувати проблеми в коді та застосовувати відповідні методи для їх вирішення. Рефакторинг значно підвищує зрозумілість, ефективність та підтримуваність програмного коду. 
Відео-презентація: https://youtu.be/RonxS672G4I
 
 	  
ДОДАТОК А 
Програмний код, використаний як приклад у презентації. 
 
// Метод 1 – Encapsulate Downcast
Object obj = getSomeObject();
if (obj instanceof SpecificType) {
    SpecificType specific = (SpecificType) obj;
    specific.performAction();
}

// Після рефакторингу  
SpecificType specific = safeCastToSpecificType(getSomeObject());
if (specific != null) {
    specific.performAction();
}

private SpecificType safeCastToSpecificType(Object obj) {
    return (obj instanceof SpecificType) ? (SpecificType) obj : null;
}
// Метод 2 – Hide Delegate
Employee employee = getEmployee(); String managerName = employee.getDepartment().getManager().getName();
// Після рефакторингу  
Employee employee = getEmployee();
String managerName = employee.getDepartment().getManager().getName();

class Employee {
    private Department department;

    public String getManagerName() {
        return department.getManager().getName();
    }
} 

// Метод 3 – Replace Record with Data record = {"name": "John", "age": 30}
print(f"Name: {record['name']}, Age: {record['age']}")
// Після рефакторингу  
from dataclasses import dataclass

@dataclass
class Person:
    name: str
    age: int

def print_person_info(person: Person):
    print(f"Name: {person.name}, Age: {person.age}")

person = Person(name="John", age=30)
print_person_info(person)

ДОДАТОК Б
Презентація на тему «Методи рефакторингу коду програмного забезпечення».


 
Методи рефакторингу коду
Виконав ст. гр. ПЗПІ-22-8 Фатьянов Єгор

Encapsulate Downcast
Переваги:

Зменшення дублювання коду.
Підвищення безпеки та читабельності.
Легке внесення змін у логіку приведення типів.
Hide Delegate
Проблема:

Надмірний доступ до складних ланцюжків об'єктів.
Вплив:

Порушення принципу інкапсуляції, складність внесення змін.
Переваги:

Покращення інкапсуляції.
Менша залежність від внутрішньої структури об'єктів.
Спрощення внесення змін до архітектури.
Replace Record with Data Class
Проблема:

Використання структур чи записів без методів, які можуть опрацьовувати дані.
Вплив:

Ускладнення роботи з даними, дублювання логіки.
Переваги:

Підвищення читабельності та підтримуваності.
Додавання методів для роботи з даними.
Спрощення інтеграції в об'єктно-орієнтовану модель.

Висновки
Рефакторинг за допомогою методів Encapsulate Downcast, Hide Delegate та Replace Record with Data Class дозволяє суттєво покращити якість програмного коду.
Encapsulate Downcast забезпечує безпеку приведення типів, зменшує дублювання коду та знижує ризик помилок.
Hide Delegate сприяє кращій інкапсуляції, спрощує структуру коду та знижує залежність від внутрішньої архітектури об'єктів.
Replace Record with Data Class створює чіткі й зрозумілі структури даних із визначеними атрибутами та методами, що робить код більш модульним і зручним для розширення.
Загалом, застосування цих методів знижує технічний борг, підвищує читабельність, покращує модульність та спрощує тестування. Це дозволяє ефективніше працювати над проектами, знижуючи ризики помилок і полегшуючи підтримку коду.

Список використаних джерел
Мартін Фаулер. "Refactoring: Improving the Design of Existing Code". Addison-Wesley Professional. Amazon
Офіційна документація мови Java: Oracle Docs
Офіційна документація Python: Python Docs
Інструменти для рефакторингу в IntelliJ IDEA та PyCharm: JetBrains
















		































































































