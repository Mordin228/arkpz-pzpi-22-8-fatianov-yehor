МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»




ЗВІТ
З лабораторної роботи №2
з дисципліни
«Аналіз та рефакторинг коду»



Виконав:                                                                                                  Перевірив                      
ст. гр. ПЗПІ-22-8                                                                      ст. викладач каф. ПІ
Фатьянов Єгор                                                                                   Сокорчук І. П.












Харків 2024
2 РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)

2.1	Мета роботи
Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу для програмної системи MedProtect.
2.2	Хід роботи
2.2.1	Опис інженерних рішень
У процесі створення програмної системи медичного страхування було реалізовано низку інженерних рішень, спрямованих на забезпечення надійності, безпеки, продуктивності та зручності використання. Основний акцент зроблено на ефективному управлінні базою даних, захищеному серверному API та стабільній інтеграції з IoT-пристроями для моніторингу здоров’я користувачів. 
Для збереження та обробки даних обрано MS SQL Server, що забезпечує транзакційну цілісність, швидкодію та масштабованість. База даних побудована на основі реляційної моделі та містить такі основні таблиці:
•	Users – містить інформацію про користувачів (ідентифікатор, ім’я, електронну пошту, дату народження, пароль у хешованому вигляді).
•	IoTDevices – зберігає дані про прив’язані до користувачів пристрої моніторингу здоров’я.
•	HealthMetrics – містить отримані від IoT-датчиків показники здоров’я (пульс, кроки, витрачені калорії, дата вимірювання).
•	InsuranceClaims – таблиця страхових випадків, що містить дані про статус заявки та суму виплати.
•	Notifications – містить історію сповіщень для користувачів щодо їхніх показників здоров’я або змін у статусі страхових заявок.
•	Managers – таблиця адміністраторів та страхових менеджерів, які обробляють заявки користувачів.

Для реалізації серверної частини використано C# (ASP.NET Core), що дозволяє ефективно керувати запитами користувачів та забезпечує гнучку архітектуру REST API.
Функціональність API включає:
•	Реєстрацію та автентифікацію користувачів (JWT-токени для безпечного входу).
•	Обробку даних з IoT-пристроїв (запис показників здоров’я, аналітика).
•	Модуль страхових заявок (створення, перевірка статусу, управління заявками менеджерами).
•	Система сповіщень (повідомлення про критичні показники здоров’я).
Для взаємодії з базою даних використано Entity Framework Core, що дозволяє зручно працювати з даними через ORM-модель.
•	JWT (JSON Web Token) використовується для автентифікації користувачів та менеджерів.
•	bcrypt.js застосовується для хешування паролів.
•	Рівні доступу:
o	Користувачі мають доступ лише до своїх даних.
o	Менеджери можуть переглядати страхові заявки та ухвалювати рішення.
Серверна частина автоматично аналізує отримані від IoT-пристроїв дані. Якщо показники перевищують норму, система автоматично надсилає сповіщення менеджеру або користувачу.
Приклади критичних ситуацій:
•	Пульс > 120 ударів/хв – система генерує аварійне сповіщення та записує його в базу даних.
•	Кількість кроків надто мала або велика – може бути ознакою проблем зі здоров’ям.
•	Відсутність даних з пристрою – може означати втрату зв’язку або проблему з пристроєм.

2.2.2	Розробка UML діаграми прецедентів (Use Case Diagram)
Система MedProtect призначена для моніторингу здоров’я застрахованих осіб, управління страховими заявками та автоматизації обробки медичних показників. Вона використовує IoT-пристрої для збору даних про фізичну активність, серверну частину для обробки інформації та мобільний або веб-інтерфейс для взаємодії з користувачами. Головними пріоритетами стали безпека, оперативність та масштабованість системи, що дозволяє ефективно керувати страховими процесами.
У системі взаємодіють два основних актори: застрахований користувач та менеджер страхової компанії. Користувач отримує доступ до власних медичних даних, подає страхові заявки та отримує повідомлення про їхній статус. Менеджер виконує перевірку заявок, аналізує показники здоров’я користувачів та приймає рішення щодо страхових виплат.
Архітектура побудована так, щоб мінімізувати вплив людського фактора та автоматизувати більшість процесів. IoT-пристрої передають дані через MQTT-протокол у реальному часі, що дозволяє серверу швидко реагувати на критичні зміни у стані здоров’я. У разі перевищення допустимих значень система автоматично фіксує подію та надсилає сповіщення як користувачеві, так і менеджеру.
Система надає можливість користувачам переглядати свої медичні показники, а менеджерам – аналізувати ці дані для прийняття рішень щодо виплат. Завдяки інтеграції бази даних із серверною частиною, усі операції логуються, що забезпечує прозорість та можливість подальшого аналізу.
Ключовим аспектом є автоматизація оцінки страхових випадків. Під час подання заявки система порівнює отримані дані із встановленими пороговими значеннями та визначає рівень ризику. Якщо дані свідчать про відповідність страховому випадку, менеджер отримує рекомендацію щодо ухвалення рішення. Це дозволяє зменшити кількість помилкових виплат та пришвидшити обробку заявок.
Для захисту персональних даних використовується авторизація через JWT, а всі паролі зберігаються у хешованому вигляді. Обмеження доступу до даних забезпечує відповідність сучасним стандартам безпеки.
MedProtect інтегрує сучасні технології для створення гнучкої та ефективної системи моніторингу здоров’я та управління страховими виплатами. Взаємодія IoT-пристроїв, серверної логіки та зручного інтерфейсу дає змогу автоматизувати процеси та покращити якість страхових послуг.


 
Рисунок 2.1 - UML діаграма прецедентів
2.2.3	Розробка ER-моделі даних (Entity–Relationship Model)
Система MedProtect використовує реляційну базу даних, яка забезпечує зберігання, управління та структурування інформації про користувачів, медичні показники, страхові випадки, IoT-пристрої та систему сповіщень. Структура бази даних побудована так, щоб підтримувати ефективну взаємодію між застрахованими особами, менеджерами страхових компаній та пристроями, що моніторять здоров’я користувачів.
Основою бази даних є таблиця Users, яка містить унікальні ідентифікатори користувачів, їхні персональні дані (ПІБ, електронну пошту, дату народження) та захищені паролі. Користувач може мати прив’язані до свого облікового запису IoT-пристрої, які передають медичні показники в систему. Для цього використовується таблиця IoTDevices, де зберігається інформація про підключені сенсори, їхні унікальні ідентифікатори, серійні номери та дата активації.
Дані, отримані від сенсорів, фіксуються у таблиці HealthMetrics, яка містить показники серцебиття, кількість кроків, витрачені калорії та час запису. Ця таблиця безпосередньо пов’язана з IoTDevices, що дозволяє відстежувати історію медичних показників кожного користувача.
Система також підтримує автоматизовану обробку страхових випадків. Таблиця InsuranceClaims містить заявки на страхові виплати, їхній статус (в обробці, схвалено, відхилено), суму виплати та дату подання. Кожен страховий випадок пов’язаний із конкретним користувачем та може містити дані про медичні показники, які стали причиною звернення.
Для оперативного інформування користувачів реалізовано таблицю Notifications, яка містить сповіщення про важливі події, такі як підвищений пульс або зміна статусу страхової заявки. У разі критичних змін система автоматично створює запис у цій таблиці, надсилаючи відповідне повідомлення користувачеві або менеджеру.
Завдяки чітко визначеним зв’язкам між таблицями система MedProtect забезпечує прозору взаємодію між користувачами, страховою компанією та IoT-пристроями. Це дозволяє ефективно зберігати історію медичних показників, аналізувати дані та приймати обґрунтовані рішення щодо страхових виплат. Така структура легко масштабується, що дає можливість розширювати функціональність системи, додаючи нові типи сенсорів, розширюючи аналітичні можливості та автоматизуючи процес ухвалення рішень.

 
Рисунок 2.2 – ER діаграма даних
2.2.4	Створення діаграми структури БД
2.2.3 Розробка ER-моделі даних для MedProtect
Система MedProtect базується на реляційній базі даних, яка забезпечує ефективне зберігання, обробку та управління інформацією, пов’язаною з користувачами, медичними показниками, страхуванням та IoT-пристроями.
Ключовою таблицею є Users, яка містить дані про користувачів, включаючи унікальні ідентифікатори, особисту інформацію (ПІБ, електронну пошту, дату народження) та хешовані паролі. Вона є основою для зв’язку з іншими таблицями системи, такими як IoTDevices, HealthMetrics та InsuranceClaims.
Таблиця IoTDevices містить інформацію про пристрої, які збирають медичні дані користувачів. Кожен пристрій має унікальний ідентифікатор, серійний номер і дату активації. Він пов’язаний із конкретним користувачем, що дозволяє системі відстежувати показники здоров’я та реагувати на критичні зміни.
Отримані від пристроїв дані записуються в таблицю HealthMetrics, яка містить параметри здоров’я, такі як серцебиття, кількість кроків, витрачені калорії та час фіксації. Ці показники дозволяють аналізувати стан користувача та виявляти можливі відхилення.
Таблиця InsuranceClaims використовується для обробки страхових випадків. Вона містить інформацію про заявки на страхові виплати, їхній статус (в обробці, схвалено, відхилено), суму виплати та дату подання. Кожен запис у цій таблиці пов’язаний із користувачем, що дозволяє аналізувати історію страхових звернень.
Система також має механізм автоматичних сповіщень. Таблиця Notifications фіксує важливі події, такі як підвищений рівень пульсу або зміна статусу страхової заявки. У разі критичних змін система генерує запис у цій таблиці, що дозволяє оперативно інформувати користувачів або страхових менеджерів.
Взаємозв’язки між таблицями побудовані за принципом "один-до-багатьох". Один користувач може мати декілька IoT-пристроїв, кожен пристрій може генерувати численні записи у таблиці HealthMetrics, а кожен страховий випадок пов’язаний із конкретним користувачем. Це забезпечує логічну організацію даних і мінімізує дублювання інформації.
Структура бази даних MedProtect дозволяє легко розширювати систему, додаючи нові типи пристроїв та сенсорів. Вона забезпечує надійність зберігання даних, простоту аналізу та можливість автоматизованої обробки страхових випадків. Впровадження такої моделі створює ефективну платформу для моніторингу здоров'я та управління страховими послугами.

 
Рисунок 2.3 – діаграма структури БД

2.3	Висновки
У ході лабораторної роботи була розроблена база даних для серверної частини програмної системи MedProtect, призначеної для моніторингу здоров’я користувачів та обробки страхових випадків. Створена структура бази даних забезпечує ефективне збереження та обробку інформації про користувачів, їхні пристрої IoT, показники здоров’я, страхові випадки та сповіщення.
Також було реалізовано прикладний програмний інтерфейс (API), що дозволяє взаємодіяти з базою даних через REST API. API підтримує основні CRUD-операції, що забезпечує гнучкість та можливість масштабування системи. Впровадження MQTT-протоколу дозволяє отримувати дані в реальному часі, а автоматичні сповіщення про критичні показники здоров'я підвищують рівень безпеки користувачів.
Завдяки використанню MS SQL Server база даних забезпечує надійне збереження інформації, підтримку транзакцій та оптимізовані запити, що гарантує стабільну роботу всієї системи.

ДОДАТОК А
Скрипт на створення таблиць у БД MedProtect

1.  CREATE TABLE Users (
2.      id INT AUTO_INCREMENT PRIMARY KEY,
3.      full_name VARCHAR(100) NOT NULL,
4.      email VARCHAR(100) NOT NULL UNIQUE,
5.      password VARCHAR(255) NOT NULL,
6.      date_of_birth DATE NOT NULL,
7.      gender ENUM('Male', 'Female', 'Other'),
8.      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
9.  );
10. 
11. CREATE TABLE IoTDevices (
12.     id INT AUTO_INCREMENT PRIMARY KEY,
13.     serial_number VARCHAR(100) NOT NULL UNIQUE,
14.     user_id INT,
15.     activation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
16.     FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE SET NULL
17. );
18. 
19. CREATE TABLE HealthMetrics (
20.     id INT AUTO_INCREMENT PRIMARY KEY,
21.     device_id INT NOT NULL,
22.     timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
23.     heart_rate INT,
24.     steps INT,
25.     calories_burned FLOAT,
26.     FOREIGN KEY (device_id) REFERENCES IoTDevices(id) ON DELETE CASCADE
27. );
28. 
29. CREATE TABLE InsuranceClaims (
30.     id INT AUTO_INCREMENT PRIMARY KEY,
31.     user_id INT NOT NULL,
32.     claim_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
33.     status ENUM('Pending', 'Approved', 'Denied') DEFAULT 'Pending',
34.     payout_amount DECIMAL(10, 2),
35.     FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
36. );
37. 
38. CREATE TABLE Notifications (
39.     id INT AUTO_INCREMENT PRIMARY KEY,
40.     user_id INT NOT NULL,
41.     notification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
42.     message VARCHAR(255),
43.     FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
44. );
45. 
46. CREATE TABLE Managers (
47.     id INT AUTO_INCREMENT PRIMARY KEY,
48.     full_name VARCHAR(100) NOT NULL,
49.     email VARCHAR(100) NOT NULL UNIQUE,
50.     password VARCHAR(255) NOT NULL,
51.     role ENUM('Admin', 'Manager') DEFAULT 'Manager'
52. );






ДОДАТОК Б
Функції роботи з БД для MedProtect

1  const sql = require('../config/db'); // Підключення до бази даних
2  
3  // Функція для реєстрації користувача
4  async function registerUser(fullName, email, password, dateOfBirth, gender) {
5    const query = `INSERT INTO Users (FullName, Email, PasswordHash, DateOfBirth, Gender) 
6                   VALUES (@FullName, @Email, @PasswordHash, @DateOfBirth, @Gender)
7                   OUTPUT INSERTED.UserID, INSERTED.FullName, INSERTED.Email`;
8    const values = { FullName: fullName, Email: email, PasswordHash: password, DateOfBirth: dateOfBirth, Gender: gender };
9    
10   try {
11     const result = await sql.query(query, values);
12     return result.recordset[0];
13   } catch (err) {
14     throw new Error('❌ Помилка при реєстрації користувача: ' + err.message);
15   }
16 }
17 
18 // Функція для авторизації користувача
19 async function loginUser(email, password) {
20   const query = 'SELECT * FROM Users WHERE Email = @Email';
21   const values = { Email: email };
22   
23   try {
24     const result = await sql.query(query, values);
25     if (result.recordset.length === 0 || result.recordset[0].PasswordHash !== password) {
26       throw new Error('⛔ Невірний email або пароль');
27     }
28     return result.recordset[0];
29   } catch (err) {
30     throw new Error('❌ Помилка при авторизації: ' + err.message);
31   }
32 }
33 
34 // Функція для додавання IoT-пристрою
35 async function registerDevice(serialNumber, userID) {
36   const query = `INSERT INTO IoTDevices (SerialNumber, UserID) 
37                  VALUES (@SerialNumber, @UserID)
38                  OUTPUT INSERTED.DeviceID, INSERTED.SerialNumber, INSERTED.ActivationDate`;
39   const values = { SerialNumber: serialNumber, UserID: userID };
40   
41   try {
42     const result = await sql.query(query, values);
43     return result.recordset[0];
44   } catch (err) {
45     throw new Error('❌ Помилка при додаванні пристрою: ' + err.message);
46   }
47 }
48 
49 // Функція для запису показників здоров'я
50 async function saveHealthMetrics(deviceID, heartRate, steps, caloriesBurned) {
51   const query = `INSERT INTO HealthMetrics (DeviceID, HeartRate, Steps, CaloriesBurned) 
52                  VALUES (@DeviceID, @HeartRate, @Steps, @CaloriesBurned)`;
53   const values = { DeviceID: deviceID, HeartRate: heartRate, Steps: steps, CaloriesBurned: caloriesBurned };
54   
55   try {
56     await sql.query(query, values);
57     console.log('✅ Показники здоров\'я успішно збережені');
58   } catch (err) {
59     throw new Error('❌ Помилка при збереженні показників здоров\'я: ' + err.message);
60   }
61 }
62 
63 // Функція для створення страхового випадку
64 async function createInsuranceClaim(userID, payoutAmount) {
65   const query = `INSERT INTO InsuranceClaims (UserID, PayoutAmount) 
66                  VALUES (@UserID, @PayoutAmount)
67                  OUTPUT INSERTED.ClaimID, INSERTED.Status`;
68   const values = { UserID: userID, PayoutAmount: payoutAmount };
69   
70   try {
71     const result = await sql.query(query, values);
72     return result.recordset[0];
73   } catch (err) {
74     throw new Error('❌ Помилка при створенні страхового випадку: ' + err.message);
75   }
76 }
77 
78 // Функція для створення сповіщень
79 async function sendNotification(userID, message) {
80   const query = `INSERT INTO Notifications (UserID, Message) 
81                  VALUES (@UserID, @Message)`;
82   const values = { UserID: userID, Message: message };
83   
84   try {
85     await sql.query(query, values);
86     console.log(`🚨 Сповіщення надіслано: ${message}`);
87   } catch (err) {
88     throw new Error('❌ Помилка при створенні сповіщення: ' + err.message);
89   }
90 }
91 
92 module.exports = { 
93   registerUser, 
94   loginUser, 
95   registerDevice, 
96   saveHealthMetrics, 
97   createInsuranceClaim, 
98   sendNotification 
99 };






ДОДАТОК В
Код взаємодії серверної частини з клієнтами

	1  const express = require('express');
2  const app = express();
3  const swaggerSetup = require('./swagger');
4  const routes = require('./routes');
5  
6  // Middleware для обробки JSON
7  app.use(express.json());
8  
9  // Підключення маршрутів
10 app.use('/api', routes);
11 
12 // Підключення Swagger
13 swaggerSetup(app);
14 
15 // Запуск сервера
16 const PORT = process.env.PORT || 3000;
17 app.listen(PORT, () => {
18   console.log(`🚀 Сервер MedProtect запущено на порті ${PORT}`);
19 });
20 
21 const swaggerUi = require('swagger-ui-express');
22 const swaggerDocs = require('./swaggerConfig');
23 
24 module.exports = (app) => {
25   app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));
26 };
27 
28 const swaggerJsDoc = require('swagger-jsdoc');
29 
30 // Swagger options
31 const swaggerOptions = {
32   swaggerDefinition: {
33     openapi: '3.0.0',
34     info: {
35       title: 'MedProtect API',
36       version: '1.0.0',
37       description: 'API для управління медичним страхуванням та моніторингу здоров\'я користувачів через IoT-пристрої',
38     },
39     servers: [
40       {
41         url: 'http://localhost:3000',
42         description: 'Локальний сервер',
43       },
44     ],
45   },
46   apis: ['./routes.js'], // Шлях до файлів, де знаходяться маршрути API
47 };
48 
49 const swaggerDocs = swaggerJsDoc(swaggerOptions);
50 
51 module.exports = swaggerDocs;
52 
53 const express = require('express');
54 const router = express.Router();
55 const { registerUser, loginUser, registerDevice, saveHealthMetrics, createInsuranceClaim } = require('./functions');
56 
57 /**
58  * @swagger
59  * /api/register:
60  *   post:
61  *     summary: Реєстрація нового користувача
62  *     requestBody:
63  *       required: true
64  *       content:
65  *         application/json:
66  *           schema:
67  *             type: object
68  *             properties:
69  *               fullName:
70  *                 type: string
71  *               email:
72  *                 type: string
73  *               password:
74  *                 type: string
75  *               dateOfBirth:
76  *                 type: string
77  *                 format: date
78  *               gender:
79  *                 type: string
80  *     responses:
81  *       200:
82  *         description: Користувач успішно зареєстрований
83  *       400:
84  *         description: Помилка при реєстрації користувача
85  */
86 router.post('/register', async (req, res) => {
87   try {
88     const { fullName, email, password, dateOfBirth, gender } = req.body;
89     const user = await registerUser(fullName, email, password, dateOfBirth, gender);
90     res.status(200).json(user);
91   } catch (err) {
92     res.status(400).json({ error: err.message });
93   }
94 });
95 
96 /**
97  * @swagger
98  * /api/login:
99  *   post:
100 *     summary: Авторизація користувача
101 *     requestBody:
102 *       required: true
103 *       content:
104 *         application/json:
105 *           schema:
106 *             type: object
107 *             properties:
108 *               email:
109 *                 type: string
110 *               password:
111 *                 type: string
112 *     responses:
113 *       200:
114 *         description: Успішна авторизація
115 *       401:
116 *         description: Невірний email або пароль
117 */
118 router.post('/login', async (req, res) => {
119   try {
120     const { email, password } = req.body;
121     const user = await loginUser(email, password);
122     res.status(200).json(user);
123   } catch (err) {
124     res.status(401).json({ error: err.message });
125   }
126 });
127 
128 /**
129 * @swagger
130 * /api/device/register:
131 *   post:
132 *     summary: Реєстрація нового IoT-пристрою
133 *     requestBody:
134 *       required: true
135 *       content:
136 *         application/json:
137 *           schema:
138 *             type: object
139 *             properties:
140 *               serialNumber:
141 *                 type: string
142 *               userID:
143 *                 type: integer
144 *     responses:
145 *       200:
146 *         description: Пристрій успішно зареєстрований
147 *       400:
148 *         description: Помилка при реєстрації пристрою
149 */
150 router.post('/device/register', async (req, res) => {
151   try {
152     const { serialNumber, userID } = req.body;
153     const device = await registerDevice(serialNumber, userID);
154     res.status(200).json(device);
155   } catch (err) {
156     res.status(400).json({ error: err.message });
157   }
158 });
159 
160 /**
161 * @swagger
162 * /api/health/metrics:
163 *   post:
164 *     summary: Запис показників здоров'я
165 *     requestBody:
166 *       required: true
167 *       content:
168 *         application/json:
169 *           schema:
170 *             type: object
171 *             properties:
172 *               deviceID:
173 *                 type: integer
174 *               heartRate:
175 *                 type: integer
176 *               steps:
177 *                 type: integer
178 *               caloriesBurned:
179 *                 type: number
180 *     responses:
181 *       200:
182 *         description: Дані успішно збережені
183 *       400:
184 *         description: Помилка при записі даних
185 */
186 router.post('/health/metrics', async (req, res) => {
187   try {
188     const { deviceID, heartRate, steps, caloriesBurned } = req.body;
189     await saveHealthMetrics(deviceID, heartRate, steps, caloriesBurned);
190     res.status(200).json({ message: '✅ Дані успішно збережені' });
191   } catch (err) {
192     res.status(400).json({ error: err.message });
193   }
194 });
195 
196 /**
197 * @swagger
198 * /api/insurance/claim:
199 *   post:
200 *     summary: Створення страхового випадку
201 *     requestBody:
202 *       required: true
203 *       content:
204 *         application/json:
205 *           schema:
206 *             type: object
207 *             properties:
208 *               userID:
209 *                 type: integer
210 *               payoutAmount:
211 *                 type: number
212 *     responses:
213 *       200:
214 *         description: Страховий випадок створено
215 *       400:
216 *         description: Помилка при створенні страхового випадку
217 */
218 router.post('/insurance/claim', async (req, res) => {
219   try {
220     const { userID, payoutAmount } = req.body;
221     const claim = await createInsuranceClaim(userID, payoutAmount);
222     res.status(200).json(claim);
223   } catch (err) {
224     res.status(400).json({ error: err.message });
225   }
226 });
227 
228 module.exports = router;

Посилання на відео: https://www.youtube.com/watch?v=EJiFjyNHJAk
